import asyncio
import logging
import os
import io

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command

from openai import OpenAI
from gtts import gTTS
import speech_recognition as sr
from pydub import AudioSegment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
BOT_TOKEN = "7625718706:AAETeaPXHHpqxI-iDyX28r08ytmNH5a8Dbc"
OPENAI_API_KEY = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–Ω–æ–ø–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
keyboard = InlineKeyboardMarkup(inline_keyboard=[
[
InlineKeyboardButton(text="–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å", callback_data="spread_day"),
InlineKeyboardButton(text="–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="spread_week"),
InlineKeyboardButton(text="–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü", callback_data="spread_month")
]
])

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
continue_keyboard = InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="üîÑ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
])

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
await message.answer(
"–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–º/—Ç–µ–∫—Å—Ç–æ–º.",
reply_markup=keyboard
)

# –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
@dp.callback_query(F.data.startswith("spread_"))
async def handle_spread(callback: CallbackQuery):
spread_type = callback.data.split("_")[1]
await callback.message.answer(f"–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ {spread_type} –≥–æ—Ç–æ–≤! (–ø—Ä–∏–º–µ—Ä)")
await callback.answer()

# –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query(F.data == "new_question")
async def handle_new_question(callback: CallbackQuery):
await callback.message.answer("–ó–∞–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.")
await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
if message.voice:
file_info = await bot.get_file(message.voice.file_id)
file_path = file_info.file_path
audio_file = await bot.download_file(file_path)

with open("voice.oga", "wb") as f:
f.write(audio_file.read())

AudioSegment.from_file("voice.oga").export("voice.wav", format="wav")

recognizer = sr.Recognizer()
with sr.AudioFile("voice.wav") as source:
audio_data = recognizer.record(source)
try:
lang_code = message.from_user.language_code or "ru-RU"
question = recognizer.recognize_google(audio_data, language=lang_code)
logging.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å: {question}")
except sr.UnknownValueError:
await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
return
except Exception as e:
await message.answer(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
return
finally:
os.remove("voice.oga")
os.remove("voice.wav")
else:
question = message.text
logging.info(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {question}")

try:
completion = client.chat.completions.create(
model="gpt-4o-mini",
messages=[ # type: ignore
{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –ª–æ–≥–∏—á–Ω–æ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –º—ã—Å–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é."},
{"role": "user", "content": question}
],
temperature=0.7,
max_tokens=500
)
answer = completion.choices[0].message.content.strip()
logging.info(f"‚≠ê –û—Ç–≤–µ—Ç OpenAI: {answer}")
except Exception as e:
await message.answer(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
return

try:
lang = message.from_user.language_code or "ru"
if not lang.startswith("ru") and not lang.startswith("en"):
lang = "ru"
tts = gTTS(text=answer, lang=lang)
audio_bytes = io.BytesIO()
tts.write_to_fp(audio_bytes)
audio_bytes.seek(0)
await message.answer_voice(voice=audio_bytes)
except Exception as e:
logging.error(f"–û—à–∏–±–∫–∞ gTTS: {e}")
await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

await message.answer(answer, reply_markup=continue_keyboard)

# –ó–∞–ø—É—Å–∫
async def main():
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
await dp.start_polling(bot)

if __name__ == "__main__":
asyncio.run(main())
